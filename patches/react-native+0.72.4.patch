diff --git a/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js b/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js
index 932d309..582de73 100644
--- a/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js
+++ b/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js
@@ -164,24 +164,38 @@ class MessageQueue {
     return getValue ? getValue() : null;
   }
 
+  // callNativeSyncHook(
+  //   moduleID: number,
+  //   methodID: number,
+  //   params: mixed[],
+  //   onFail: ?(...mixed[]) => void,
+  //   onSucc: ?(...mixed[]) => void,
+  // ): mixed {
+  //   if (__DEV__) {
+  //     invariant(
+  //       global.nativeCallSyncHook,
+  //       'Calling synchronous methods on native ' +
+  //         'modules is not supported in Chrome.\n\n Consider providing alternative ' +
+  //         'methods to expose this method in debug mode, e.g. by exposing constants ' +
+  //         'ahead-of-time.',
+  //     );
+  //   }
+  //   this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
+  //   return global.nativeCallSyncHook(moduleID, methodID, params);
+  // }
   callNativeSyncHook(
     moduleID: number,
     methodID: number,
-    params: mixed[],
-    onFail: ?(...mixed[]) => void,
-    onSucc: ?(...mixed[]) => void,
-  ): mixed {
-    if (__DEV__) {
-      invariant(
-        global.nativeCallSyncHook,
-        'Calling synchronous methods on native ' +
-          'modules is not supported in Chrome.\n\n Consider providing alternative ' +
-          'methods to expose this method in debug mode, e.g. by exposing constants ' +
-          'ahead-of-time.',
-      );
-    }
+    params: any[],
+    onFail: ?Function,
+    onSucc: ?Function,
+  ): any {
+    const isDebuggingEnabled = (typeof atob !== 'undefined');
     this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
-    return global.nativeCallSyncHook(moduleID, methodID, params);
+    if(!isDebuggingEnabled)
+    {
+      return global.nativeCallSyncHook(moduleID, methodID, params);
+    }
   }
 
   processCallbacks(
